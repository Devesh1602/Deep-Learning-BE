dataset link - https://www.kaggle.com/datasets/rashikrahmanpritom/plant-disease-recognition-dataset

import numpy as np
from keras.optimizers import Adam
import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array

train_healthy = "G:\DEEP LEARNING\Train\Train\Healthy"
train_powdery = "G:\DEEP LEARNING\Train\Train\Powdery"
train_rust ="G:\DEEP LEARNING\Train\Train\Rust"

test_healthy ="G:\DEEP LEARNING\Test\Test\Healthy"
test_powdery ="G:\DEEP LEARNING\Test\Test\Powdery"
test_rust ="G:\DEEP LEARNING\Test\Test\Rust"

valid_healthy = "G:\DEEP LEARNING\Validation\Validation\Healthy"
valid_powdery ="G:\DEEP LEARNING\Validation\Validation\Powdery"
valid_rust ="G:\DEEP LEARNING\Validation\Validation\Rust"

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
image_path = 'Train/Train/Healthy/8ce77048e12f3dd4.jpg'
img = mpimg.imread(image_path)
plt.imshow(img)
plt.show()

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
image_path = 'Train\Train\Rust\80f09587dfc7988e.jpg'
img = mpimg.imread(image_path)
plt.imshow(img)
plt.show()

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory('G:\DEEP LEARNING\Train\Train',
                                                    target_size=(225, 225),
                                                    batch_size=32,
                                                    class_mode='categorical')

validation_generator = test_datagen.flow_from_directory('G:\DEEP LEARNING\Validation\Validation',
                                                        target_size=(225, 225),
                                                        batch_size=32,
                                                        class_mode='categorical')

from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
model = Sequential()
model.add(Conv2D(32, (3, 3), input_shape=(225, 225, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(3, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

history = model.fit(train_generator,
                    batch_size=16,
                    epochs=20,
                    validation_data=validation_generator,
                    validation_batch_size=16
                    )

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'], label='train')
plt.plot(history.history['val_accuracy'], label='val')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

def preprocess_image(image_path, target_size=(225, 225)):
    img = load_img(image_path, target_size=target_size)
    x = img_to_array(img)
    x = x.astype('float32') / 255.
    x = np.expand_dims(x, axis=0)
    return x

x = preprocess_image('rust.png')
x

model.save('leaf_desease.h5')

from tensorflow.keras.models import load_model
# Load the model
loaded_model = load_model('leaf_desease.h5')

predictions = loaded_model.predict(x)
predictions

labels = {0: 'Healthy', 1: 'Powdery', 2: 'Rust'}
labels

predicted_label = labels[np.argmax(predictions)]
print(predicted_label)
